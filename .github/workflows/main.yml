name: Terraform and Deploy Web App

on:
  push:
    branches:
      - main

jobs:
  # Job 1: tfinit (Initialize Terraform)
  tfinit:
    environment: test
    name: Terraform Init
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.11

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Initialize Terraform
        working-directory: terraform/
        run: terraform init

  # Job 2: tfplan (Terraform Plan)
  tfplan:
    environment: test
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: tfinit

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Plan
        working-directory: terraform/
        run: terraform plan -out=tfplan

  # Job 3: tfapply (Terraform Apply)
  tfapply:
    environment: test
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: tfplan

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Apply
        working-directory: terraform/
        run: terraform apply -auto-approve tfplan

      - name: Get EC2 Instance Details
        id: ec2_details
        working-directory: terraform/
        run: |
          echo "::set-output name=ec2_ip::$(terraform output -raw instance_public_ip)"
          echo "::set-output name=ec2_dns::$(terraform output -raw instance_public_dns)"

  # Job 4: buildapp (Build the Application)
  buildapp:
    environment: test
    name: Build App
    runs-on: ubuntu-latest
    needs: tfapply

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Node.js
        run: sudo apt-get install -y nodejs npm

      - name: Build Application
        working-directory: source/
        run: |
          npm install
          echo "Application build complete."

  # Job 5: deployapp (Deploy App to EC2)
  deployapp:
    environment: test
    name: Deploy App to EC2
    runs-on: ubuntu-latest
    needs: buildapp

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Add SSH Key
        run: |
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > /tmp/githubcikey.pem
          chmod 600 /tmp/githubcikey.pem

      - name: Deploy Application to EC2
        run: |
          scp -i /tmp/githubcikey.pem -o StrictHostKeyChecking=no -r source/* ec2-user@${{ needs.tfapply.outputs.ec2_dns }}:/home/ec2-user/
          ssh -i /tmp/githubcikey.pem -o StrictHostKeyChecking=no ec2-user@${{ needs.tfapply.outputs.ec2_dns }} << 'EOF'
            cd /home/ec2-user
            npm install
            nohup npm start &
          EOF

